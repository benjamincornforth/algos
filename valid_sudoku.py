from typing import List, Dict, Optional

class Solution:
    

    def verifyChunk(self,chunk: List[str])-> bool:
        workingSet=set()
        for cell in chunk:
            if len(workingSet)==len(workingSet.union(cell)) and cell!='.':
                return False
            workingSet.add(cell)
        return True

    def isValidSudoku(self, board: List[List[str]]) -> bool:
        for row_idx in range(9):

            if not self.verifyChunk(board[row_idx]):
                print(f'failed on row [{row_idx}]')

                return False
                
        for col_idx in range(9):

            if not self.verifyChunk([board[row_idx][col_idx] for row_idx in range(0,9)]):
                print(f'failed on column {col_idx}')

                return False

        for vertical_quadrant in range(3):
            for horizontal_quadrant in range(3):
                chunk=[]
                for r in range(3):
                    for v in range(3):
                        cell_row=vertical_quadrant*3+v
                        cell_col=horizontal_quadrant*3+r
                        chunk.append(board[cell_row][cell_col])
                
                if not self.verifyChunk(chunk):
                    return False

        return True

board=[
            ["1","2",".",".","3",".",".",".","."],
            ["4",".",".","5",".",".",".",".","."],
            [".","9","8",".",".",".",".",".","3"],
            ["5",".",".",".","6",".",".",".","4"],
            [".",".",".","8",".","3",".",".","5"],
            ["7",".",".",".","2",".",".",".","6"],
            [".",".",".",".",".",".","2",".","."],
            [".",".",".","4","1","9",".",".","8"],
            [".",".",".",".","8",".",".","7","9"]]
board2 = [  ["1","2",".",".","3",".",".",".","."],
            ["4",".",".","5",".",".",".",".","."],
            [".","9","1",".",".",".",".",".","3"],
            ["5",".",".",".","6",".",".",".","4"],
            [".",".",".","8",".","3",".",".","5"],
            ["7",".",".",".","2",".",".",".","6"],
            [".",".",".",".",".",".","2",".","."],
            [".",".",".","4","1","9",".",".","8"],
            [".",".",".",".","8",".",".","7","9"]]

board3 = [  ["5","3",".", ".","7",".", ".",".","."],
            ["6",".",".", "1","9","5", ".",".","."],
            [".","9","8", ".",".",".", ".","6","."],

            ["8",".",".", ".","6",".", ".",".","3"],
            ["4",".",".", "8",".","3", ".",".","1"],
            ["7",".",".", ".","2",".", ".",".","6"],

            [".","6",".", ".",".",".", "2","8","."],
            [".",".",".", "4","1","9", ".",".","5"],
            [".",".",".", ".","8",".", ".","7","9"]]

board4=[    [".","9",".", ".","4",".", ".",".","."],
            ["1",".",".", ".",".",".", "6",".","."],
            [".",".","3", ".",".",".", ".",".","."],

            [".",".",".", ".",".",".", ".",".","."],
            [".",".",".", "7",".",".", ".",".","."],
            ["3",".",".", ".","5",".", ".",".","."],

            [".",".","7", ".",".","4", ".",".","."],
            [".",".",".", ".",".",".", ".",".","."],
            [".",".",".", ".","7",".", ".",".","."]]

